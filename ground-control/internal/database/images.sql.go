// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: images.sql

package database

import (
	"context"
	"time"
)

const addImage = `-- name: AddImage :one
INSERT INTO images (registry, repository, tag, digest, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, registry, repository, tag, digest, created_at, updated_at
`

type AddImageParams struct {
	Registry   string
	Repository string
	Tag        string
	Digest     string
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) AddImage(ctx context.Context, arg AddImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, addImage,
		arg.Registry,
		arg.Repository,
		arg.Tag,
		arg.Digest,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Registry,
		&i.Repository,
		&i.Tag,
		&i.Digest,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM images
WHERE id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteImage, id)
	return err
}

const getImage = `-- name: GetImage :one
SELECT id, registry, repository, tag, digest, created_at, updated_at FROM images
WHERE id = $1
`

func (q *Queries) GetImage(ctx context.Context, id int32) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImage, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Registry,
		&i.Repository,
		&i.Tag,
		&i.Digest,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getImagesForSatellite = `-- name: GetImagesForSatellite :many
WITH satellite_groups AS (
    SELECT group_id FROM satellite_groups WHERE satellite_id = (SELECT id FROM satellites WHERE satellites.token = $1)
),
satellite_labels AS (
    SELECT label_id FROM satellite_labels WHERE satellite_id = (SELECT id FROM satellites WHERE satellites.token = $1)
),
all_images AS (
    SELECT image_id FROM group_images WHERE group_id IN (SELECT group_id FROM satellite_groups)
    UNION
    SELECT image_id FROM label_images WHERE label_id IN (SELECT label_id FROM satellite_labels)
)
SELECT id, registry, repository, tag, digest, created_at, updated_at
FROM images
WHERE id IN (SELECT image_id FROM all_images)
`

func (q *Queries) GetImagesForSatellite(ctx context.Context, token string) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, getImagesForSatellite, token)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.Registry,
			&i.Repository,
			&i.Tag,
			&i.Digest,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
