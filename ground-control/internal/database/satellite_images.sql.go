// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: satellite_images.sql

package database

import (
	"context"
	"time"
)

const assignImageToSatellite = `-- name: AssignImageToSatellite :exec
INSERT INTO satellite_images (satellite_id, image_id)
VALUES ($1, $2)
  ON CONFLICT DO NOTHING
`

type AssignImageToSatelliteParams struct {
	SatelliteID int32
	ImageID     int32
}

func (q *Queries) AssignImageToSatellite(ctx context.Context, arg AssignImageToSatelliteParams) error {
	_, err := q.db.ExecContext(ctx, assignImageToSatellite, arg.SatelliteID, arg.ImageID)
	return err
}

const getImagesForSatellite = `-- name: GetImagesForSatellite :many
SELECT id, registry, repository, tag, digest, created_at, updated_at, satellite_id, image_id
FROM images
JOIN satellite_images ON images.id = satellite_images.image_id
WHERE satellite_images.satellite_id = $1
`

type GetImagesForSatelliteRow struct {
	ID          int32
	Registry    string
	Repository  string
	Tag         string
	Digest      string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	SatelliteID int32
	ImageID     int32
}

func (q *Queries) GetImagesForSatellite(ctx context.Context, satelliteID int32) ([]GetImagesForSatelliteRow, error) {
	rows, err := q.db.QueryContext(ctx, getImagesForSatellite, satelliteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetImagesForSatelliteRow
	for rows.Next() {
		var i GetImagesForSatelliteRow
		if err := rows.Scan(
			&i.ID,
			&i.Registry,
			&i.Repository,
			&i.Tag,
			&i.Digest,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SatelliteID,
			&i.ImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeImageFromSatellite = `-- name: RemoveImageFromSatellite :exec
DELETE FROM satellite_images
WHERE satellite_id = $1 AND image_id = $2
`

type RemoveImageFromSatelliteParams struct {
	SatelliteID int32
	ImageID     int32
}

func (q *Queries) RemoveImageFromSatellite(ctx context.Context, arg RemoveImageFromSatelliteParams) error {
	_, err := q.db.ExecContext(ctx, removeImageFromSatellite, arg.SatelliteID, arg.ImageID)
	return err
}
