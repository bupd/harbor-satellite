// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: group_images.sql

package database

import (
	"context"
	"time"
)

const assignImageToGroup = `-- name: AssignImageToGroup :exec
INSERT INTO group_images (group_id, image_id)
VALUES ($1, $2)
  ON CONFLICT DO NOTHING
`

type AssignImageToGroupParams struct {
	GroupID int32
	ImageID int32
}

func (q *Queries) AssignImageToGroup(ctx context.Context, arg AssignImageToGroupParams) error {
	_, err := q.db.ExecContext(ctx, assignImageToGroup, arg.GroupID, arg.ImageID)
	return err
}

const getImagesForGroup = `-- name: GetImagesForGroup :many
SELECT id, registry, repository, tag, digest, created_at, updated_at, group_id, image_id
FROM images
JOIN group_images ON images.id = group_images.image_id
WHERE group_images.group_id = $1
`

type GetImagesForGroupRow struct {
	ID         int32
	Registry   string
	Repository string
	Tag        string
	Digest     string
	CreatedAt  time.Time
	UpdatedAt  time.Time
	GroupID    int32
	ImageID    int32
}

func (q *Queries) GetImagesForGroup(ctx context.Context, groupID int32) ([]GetImagesForGroupRow, error) {
	rows, err := q.db.QueryContext(ctx, getImagesForGroup, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetImagesForGroupRow
	for rows.Next() {
		var i GetImagesForGroupRow
		if err := rows.Scan(
			&i.ID,
			&i.Registry,
			&i.Repository,
			&i.Tag,
			&i.Digest,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroupID,
			&i.ImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImagesForGroupAndSubgroups = `-- name: GetImagesForGroupAndSubgroups :many
WITH RECURSIVE GroupHierarchy AS (
  SELECT g.id AS group_id
  FROM groups g
  WHERE g.id = $1

  UNION ALL

  SELECT g2.id AS group_id
  FROM groups g2
  JOIN GroupHierarchy gh ON g2.parent_group_id = gh.group_id
)
SELECT i.id, i.registry, i.repository, i.tag, i.digest, i.created_at, i.updated_at
FROM images i
JOIN group_images gi ON i.id = gi.image_id
WHERE gi.group_id IN (SELECT gh.group_id FROM GroupHierarchy gh)
`

func (q *Queries) GetImagesForGroupAndSubgroups(ctx context.Context, id int32) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, getImagesForGroupAndSubgroups, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.Registry,
			&i.Repository,
			&i.Tag,
			&i.Digest,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeImageFromGroup = `-- name: RemoveImageFromGroup :exec
DELETE FROM group_images
WHERE group_id = $1 AND image_id = $2
`

type RemoveImageFromGroupParams struct {
	GroupID int32
	ImageID int32
}

func (q *Queries) RemoveImageFromGroup(ctx context.Context, arg RemoveImageFromGroupParams) error {
	_, err := q.db.ExecContext(ctx, removeImageFromGroup, arg.GroupID, arg.ImageID)
	return err
}
